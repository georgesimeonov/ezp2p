@model IEnumerable<EasyP2P.Web.Models.PurchaseOrderViewModel>

@{
    ViewData["Title"] = "Purchase Orders";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Purchase Orders</h2>
        <button class="btn btn-outline-secondary" id="toggleFilters">
            <i class="bi bi-funnel"></i> Toggle Filters
        </button>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Filters Section -->
    <div class="card mb-3" id="filtersCard" style="display: none;">
        <div class="card-header bg-light">
            <h6 class="mb-0">
                <i class="bi bi-funnel"></i> Filters
                <button class="btn btn-sm btn-outline-secondary float-end" id="clearFilters">
                    <i class="bi bi-x-circle"></i> Clear All
                </button>
            </h6>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-2">
                    <label for="filterPoId" class="form-label">PO ID</label>
                    <input type="number" class="form-control form-control-sm filter-input" id="filterPoId" placeholder="Enter PO ID">
                </div>
                <div class="col-md-2">
                    <label for="filterPorId" class="form-label">POR ID</label>
                    <input type="number" class="form-control form-control-sm filter-input" id="filterPorId" placeholder="Enter POR ID">
                </div>
                <div class="col-md-2">
                    <label for="filterItem" class="form-label">Item</label>
                    <input type="text" class="form-control form-control-sm filter-input" id="filterItem" placeholder="Search item...">
                </div>
                <div class="col-md-2">
                    <label for="filterQuantity" class="form-label">Quantity</label>
                    <div class="d-flex gap-1">
                        <input type="number" class="form-control form-control-sm filter-input" id="filterQuantityMin" placeholder="Min">
                        <input type="number" class="form-control form-control-sm filter-input" id="filterQuantityMax" placeholder="Max">
                    </div>
                </div>
                <div class="col-md-2">
                    <label for="filterUnitPrice" class="form-label">Unit Price</label>
                    <div class="d-flex gap-1">
                        <input type="number" step="0.01" class="form-control form-control-sm filter-input" id="filterUnitPriceMin" placeholder="Min">
                        <input type="number" step="0.01" class="form-control form-control-sm filter-input" id="filterUnitPriceMax" placeholder="Max">
                    </div>
                </div>
                <div class="col-md-2">
                    <label for="filterTotalPrice" class="form-label">Total Price</label>
                    <div class="d-flex gap-1">
                        <input type="number" step="0.01" class="form-control form-control-sm filter-input" id="filterTotalPriceMin" placeholder="Min">
                        <input type="number" step="0.01" class="form-control form-control-sm filter-input" id="filterTotalPriceMax" placeholder="Max">
                    </div>
                </div>
            </div>
            <div class="row g-3 mt-2">
                <div class="col-md-3">
                    <label for="filterSupplier" class="form-label">Supplier</label>
                    <input type="text" class="form-control form-control-sm filter-input" id="filterSupplier" placeholder="Search supplier...">
                </div>
                <div class="col-md-3">
                    <label for="filterDateFrom" class="form-label">Date From</label>
                    <input type="date" class="form-control form-control-sm filter-input" id="filterDateFrom">
                </div>
                <div class="col-md-3">
                    <label for="filterDateTo" class="form-label">Date To</label>
                    <input type="date" class="form-control form-control-sm filter-input" id="filterDateTo">
                </div>
                <div class="col-md-3">
                    <label for="filterStatus" class="form-label">Status</label>
                    <select class="form-select form-select-sm filter-input" id="filterStatus">
                        <option value="">All Statuses</option>
                        <option value="Created">Created</option>
                        <option value="Approved">Approved</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            <span id="filteredCount">@Model.Count()</span> of @Model.Count() orders shown
                        </small>
                        <div>
                            <button class="btn btn-sm btn-primary" id="applyFilters">
                                <i class="bi bi-check"></i> Apply Filters
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" id="resetFilters">
                                <i class="bi bi-arrow-clockwise"></i> Reset
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-primary text-white">
            <h5>
                All Purchase Orders
                <span class="badge bg-light text-dark" id="totalCount">@Model.Count()</span>
                <span class="badge bg-warning text-dark" id="filteredBadge" style="display: none;">Filtered</span>
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover" id="purchaseOrdersTable">
                        <thead>
                            <tr>
                                <th>
                                    PO ID
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="id" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    POR ID
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="porId" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Item
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="item" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Quantity
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="quantity" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Unit Price
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="unitPrice" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Total Price
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="totalPrice" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Supplier
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="supplier" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Date
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="date" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Status
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="status" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr data-po-id="@item.Id"
                                    data-por-id="@item.PurchaseOrderRequestId"
                                    data-item="@item.ItemName.ToLower()"
                                    data-quantity="@item.Quantity"
                                    data-unit-price="@item.UnitPrice"
                                    data-total-price="@item.TotalPrice"
                                    data-supplier="@item.Supplier.ToLower()"
                                    data-date="@item.OrderDate.ToString("yyyy-MM-dd")"
                                    data-status="@item.Status.ToLower()">
                                    <td>@item.Id</td>
                                    <td>@item.PurchaseOrderRequestId</td>
                                    <td>@item.ItemName</td>
                                    <td>@item.Quantity</td>
                                    <td>@item.UnitPrice.ToString("C")</td>
                                    <td>@item.TotalPrice.ToString("C")</td>
                                    <td>@item.Supplier</td>
                                    <td>@item.OrderDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <span class="badge bg-@(item.Status == "Created" ? "primary" :
                                                                item.Status == "Approved" ? "success" :
                                                                item.Status == "Cancelled" ? "danger" : "secondary")">
                                            @item.Status
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm">
                                                Details
                                            </a>
                                            <a asp-action="ExportPdf" asp-route-id="@item.Id" class="btn btn-secondary btn-sm ms-1">
                                                <i class="bi bi-file-earmark-pdf"></i> PDF
                                            </a>
                                            @if (item.Status != "Cancelled")
                                            {
                                                <a asp-action="Cancel" asp-route-id="@item.Id" class="btn btn-warning btn-sm ms-1">
                                                    Cancel
                                                </a>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    No purchase orders found. Create purchase orders from approved purchase order requests.
                </div>
            }
        </div>
    </div>
</div>

<style>
    .sort-btn {
        color: #6c757d;
        text-decoration: none !important;
    }

    .sort-btn:hover {
        color: #0d6efd;
    }

    .sort-btn.active {
        color: #0d6efd;
    }

    .filter-input {
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .filter-input:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .table tbody tr.filtered-out {
        display: none;
    }

    .badge {
        font-size: 0.75em;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Elements
        const toggleFiltersBtn = document.getElementById('toggleFilters');
        const filtersCard = document.getElementById('filtersCard');
        const clearFiltersBtn = document.getElementById('clearFilters');
        const applyFiltersBtn = document.getElementById('applyFilters');
        const resetFiltersBtn = document.getElementById('resetFilters');
        const filteredCountSpan = document.getElementById('filteredCount');
        const totalCountSpan = document.getElementById('totalCount');
        const filteredBadge = document.getElementById('filteredBadge');
        const tableRows = document.querySelectorAll('#purchaseOrdersTable tbody tr');
        const filterInputs = document.querySelectorAll('.filter-input');
        const sortButtons = document.querySelectorAll('.sort-btn');

        const totalCount = tableRows.length;
        let currentSort = { column: null, direction: 'asc' };

        // Toggle filters visibility
        toggleFiltersBtn.addEventListener('click', function() {
            if (filtersCard.style.display === 'none') {
                filtersCard.style.display = 'block';
                this.innerHTML = '<i class="bi bi-funnel-fill"></i> Hide Filters';
            } else {
                filtersCard.style.display = 'none';
                this.innerHTML = '<i class="bi bi-funnel"></i> Toggle Filters';
            }
        });

        // Clear all filters
        clearFiltersBtn.addEventListener('click', function() {
            filterInputs.forEach(input => {
                input.value = '';
            });
            applyFilters();
        });

        // Reset filters (same as clear for now)
        resetFiltersBtn.addEventListener('click', function() {
            clearFiltersBtn.click();
        });

        // Apply filters on button click
        applyFiltersBtn.addEventListener('click', applyFilters);

        // Apply filters on input change (with debounce)
        let filterTimeout;
        filterInputs.forEach(input => {
            input.addEventListener('input', function() {
                clearTimeout(filterTimeout);
                filterTimeout = setTimeout(applyFilters, 300);
            });
        });

        // Filter function
        function applyFilters() {
            let visibleCount = 0;
            const hasActiveFilters = Array.from(filterInputs).some(input => input.value.trim() !== '');

            tableRows.forEach(row => {
                let isVisible = true;

                // PO ID filter
                const poIdFilter = document.getElementById('filterPoId').value;
                if (poIdFilter && row.dataset.poId !== poIdFilter) {
                    isVisible = false;
                }

                // POR ID filter
                const porIdFilter = document.getElementById('filterPorId').value;
                if (porIdFilter && row.dataset.porId !== porIdFilter) {
                    isVisible = false;
                }

                // Item filter
                const itemFilter = document.getElementById('filterItem').value.toLowerCase();
                if (itemFilter && !row.dataset.item.includes(itemFilter)) {
                    isVisible = false;
                }

                // Quantity range filter
                const quantityMin = document.getElementById('filterQuantityMin').value;
                const quantityMax = document.getElementById('filterQuantityMax').value;
                const quantity = parseInt(row.dataset.quantity);
                if (quantityMin && quantity < parseInt(quantityMin)) {
                    isVisible = false;
                }
                if (quantityMax && quantity > parseInt(quantityMax)) {
                    isVisible = false;
                }

                // Unit price range filter
                const unitPriceMin = document.getElementById('filterUnitPriceMin').value;
                const unitPriceMax = document.getElementById('filterUnitPriceMax').value;
                const unitPrice = parseFloat(row.dataset.unitPrice);
                if (unitPriceMin && unitPrice < parseFloat(unitPriceMin)) {
                    isVisible = false;
                }
                if (unitPriceMax && unitPrice > parseFloat(unitPriceMax)) {
                    isVisible = false;
                }

                // Total price range filter
                const totalPriceMin = document.getElementById('filterTotalPriceMin').value;
                const totalPriceMax = document.getElementById('filterTotalPriceMax').value;
                const totalPrice = parseFloat(row.dataset.totalPrice);
                if (totalPriceMin && totalPrice < parseFloat(totalPriceMin)) {
                    isVisible = false;
                }
                if (totalPriceMax && totalPrice > parseFloat(totalPriceMax)) {
                    isVisible = false;
                }

                // Supplier filter
                const supplierFilter = document.getElementById('filterSupplier').value.toLowerCase();
                if (supplierFilter && !row.dataset.supplier.includes(supplierFilter)) {
                    isVisible = false;
                }

                // Date range filter
                const dateFrom = document.getElementById('filterDateFrom').value;
                const dateTo = document.getElementById('filterDateTo').value;
                const rowDate = row.dataset.date;
                if (dateFrom && rowDate < dateFrom) {
                    isVisible = false;
                }
                if (dateTo && rowDate > dateTo) {
                    isVisible = false;
                }

                // Status filter
                const statusFilter = document.getElementById('filterStatus').value.toLowerCase();
                if (statusFilter && row.dataset.status !== statusFilter) {
                    isVisible = false;
                }

                // Apply visibility
                if (isVisible) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            // Update counts and badges
            filteredCountSpan.textContent = visibleCount;
            if (hasActiveFilters) {
                filteredBadge.style.display = 'inline-block';
                totalCountSpan.textContent = visibleCount;
            } else {
                filteredBadge.style.display = 'none';
                totalCountSpan.textContent = totalCount;
            }
        }

        // Sorting functionality
        sortButtons.forEach(button => {
            button.addEventListener('click', function() {
                const column = this.dataset.column;
                let direction = this.dataset.direction;

                // Reset all sort buttons
                sortButtons.forEach(btn => {
                    btn.classList.remove('active');
                    btn.innerHTML = '<i class="bi bi-arrow-up-down"></i>';
                });

                // Toggle direction
                if (currentSort.column === column) {
                    direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    direction = 'asc';
                }

                // Update current sort
                currentSort = { column, direction };

                // Update button appearance
                this.classList.add('active');
                this.innerHTML = direction === 'asc' ? '<i class="bi bi-arrow-up"></i>' : '<i class="bi bi-arrow-down"></i>';
                this.dataset.direction = direction;

                // Sort the table
                sortTable(column, direction);
            });
        });

        function sortTable(column, direction) {
            const tbody = document.querySelector('#purchaseOrdersTable tbody');
            const rows = Array.from(tableRows);

            rows.sort((a, b) => {
                let aValue, bValue;

                switch (column) {
                    case 'id':
                    case 'porId':
                    case 'quantity':
                        aValue = parseInt(a.dataset[column === 'porId' ? 'porId' : column === 'id' ? 'poId' : 'quantity']);
                        bValue = parseInt(b.dataset[column === 'porId' ? 'porId' : column === 'id' ? 'poId' : 'quantity']);
                        break;
                    case 'unitPrice':
                    case 'totalPrice':
                        aValue = parseFloat(a.dataset[column]);
                        bValue = parseFloat(b.dataset[column]);
                        break;
                    case 'date':
                        aValue = new Date(a.dataset.date);
                        bValue = new Date(b.dataset.date);
                        break;
                    case 'item':
                    case 'supplier':
                    case 'status':
                        aValue = a.dataset[column];
                        bValue = b.dataset[column];
                        break;
                    default:
                        return 0;
                }

                if (aValue < bValue) return direction === 'asc' ? -1 : 1;
                if (aValue > bValue) return direction === 'asc' ? 1 : -1;
                return 0;
            });

            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));
        }

        // Initialize with no filters applied
        applyFilters();
    });
</script>