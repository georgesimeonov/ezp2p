@model IEnumerable<EasyP2P.Web.Models.PurchaseOrderRequestViewModel>

@{
    ViewData["Title"] = "Purchase Order Requests";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Purchase Order Requests</h2>
        <div>
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> New Purchase Request
            </a>
            <form asp-action="AddSample" method="post" style="display: inline;">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-outline-secondary">
                    <i class="bi bi-database-add"></i> Add Sample Data
                </button>
            </form>
        </div>
    </div>

    <!-- Status Summary Cards -->
    <div class="row mb-4">
        @{
            var statusGroups = Model.GroupBy(x => x.Status).ToDictionary(g => g.Key, g => g.Count());
        }
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="PendingApproval" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-warning">@(statusGroups.GetValueOrDefault("PendingApproval", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-clock"></i> Pending
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="Approved" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-success">@(statusGroups.GetValueOrDefault("Approved", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-check-circle"></i> Approved
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="Rejected" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-danger">@(statusGroups.GetValueOrDefault("Rejected", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-x-circle"></i> Rejected
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="PurchaseOrderCreated" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-info">@(statusGroups.GetValueOrDefault("PurchaseOrderCreated", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-file-text"></i> PO Created
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="Cancelled" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-dark">@(statusGroups.GetValueOrDefault("Cancelled", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-dash-circle"></i> Cancelled
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="" role="button" tabindex="0">
                <div class="card-body border-primary">
                    <h5 class="card-title text-primary">@Model.Count()</h5>
                    <p class="card-text">
                        <i class="bi bi-list-ul"></i> Total
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card mb-3">
        <div class="card-header">
            <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse"
                    data-bs-target="#filtersCollapse" aria-expanded="false" id="filtersToggleBtn">
                <i class="bi bi-funnel"></i> Filters
            </button>
            <button class="btn btn-outline-danger btn-sm ms-2" id="clearFiltersBtn" style="display: none;">
                <i class="bi bi-x-circle"></i> Clear Filters
            </button>
        </div>
        <div class="collapse" id="filtersCollapse">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Status</label>
                        <select id="statusFilter" class="form-select filter-input">
                            <option value="">All Statuses</option>
                            <option value="PendingApproval">Pending Approval</option>
                            <option value="Approved">Approved</option>
                            <option value="Rejected">Rejected</option>
                            <option value="PurchaseOrderCreated">PO Created</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Priority</label>
                        <select id="priorityFilter" class="form-select filter-input">
                            <option value="">All Priorities</option>
                            <option value="Urgent">Urgent</option>
                            <option value="High">High</option>
                            <option value="Medium">Medium</option>
                            <option value="Low">Low</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Department</label>
                        <select id="departmentFilter" class="form-select filter-input">
                            <option value="">All Departments</option>
                            @foreach (var dept in Model.Select(x => x.Department).Distinct().OrderBy(x => x))
                            {
                                <option value="@dept">@dept</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Item Search</label>
                        <input type="text" id="itemFilter" class="form-control filter-input" placeholder="Search items...">
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h5>
                <i class="bi bi-list-ul"></i> All Purchase Order Requests
                <span class="badge bg-light text-dark" id="totalCount">@Model.Count()</span>
                <span class="badge bg-warning text-dark" id="filteredBadge" style="display: none;">Filtered</span>
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover" id="requestsTable">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Item</th>
                                <th>Quantity</th>
                                <th>Priority</th>
                                <th>Department</th>
                                <th>Status</th>
                                <th>Request Date</th>
                                <th>Requested By</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.OrderByDescending(x => x.RequestDate))
                            {
                                <tr data-status="@item.Status.ToLower()"
                                    data-priority="@item.Priority.ToLower()"
                                    data-department="@item.Department.ToLower()"
                                    data-item="@item.ItemName.ToLower()"
                                    class="@(item.Priority == "Urgent" ? "table-warning" : "")">
                                    <td>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="text-decoration-none fw-bold">
                                            #@item.Id
                                        </a>
                                    </td>
                                    <td>@item.ItemName</td>
                                    <td>@item.Quantity</td>
                                    <td>
                                        <span class="badge bg-@(item.Priority == "Urgent" ? "danger" :
                                                                item.Priority == "High" ? "warning" :
                                                                item.Priority == "Medium" ? "info" : "secondary")">
                                            @item.Priority
                                        </span>
                                    </td>
                                    <td>@item.Department</td>
                                    <td>
                                        <span class="badge @item.StatusBadgeClass">
                                            <i class="@item.StatusIcon"></i> @item.Status
                                        </span>
                                    </td>
                                    <td>@item.RequestDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@item.RequestedBy</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@item.Id"
                                               class="btn btn-info btn-sm">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            @if (item.CanCreatePO)
                                            {
                                                <a asp-controller="PurchaseOrder" asp-action="Create" asp-route-id="@item.Id"
                                                   class="btn btn-primary btn-sm">
                                                    <i class="bi bi-file-plus"></i>
                                                </a>
                                            }
                                            @if (item.CanApprove)
                                            {
                                                <form asp-action="Approve" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-success btn-sm"
                                                            onclick="return confirm('Approve request #@item.Id?')"
                                                            title="Approve">
                                                        <i class="bi bi-check"></i>
                                                    </button>
                                                </form>
                                                <form asp-action="Reject" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-danger btn-sm"
                                                            onclick="return confirm('Reject request #@item.Id?')"
                                                            title="Reject">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h4 class="text-muted mt-3">No Requests Found</h4>
                    <p class="text-muted">Create your first purchase order request to get started.</p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Create First Request
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const filterInputs = document.querySelectorAll('.filter-input');
        const tableRows = document.querySelectorAll('#requestsTable tbody tr');
        const totalCount = tableRows.length;
        const filteredBadge = document.getElementById('filteredBadge');
        const totalCountSpan = document.getElementById('totalCount');
        const filtersCollapse = document.getElementById('filtersCollapse');
        const filtersToggleBtn = document.getElementById('filtersToggleBtn');
        const clearFiltersBtn = document.getElementById('clearFiltersBtn');
        const statusCards = document.querySelectorAll('.status-card');

        // Bootstrap collapse instance for programmatic control
        const bsCollapse = new bootstrap.Collapse(filtersCollapse, { toggle: false });

        // Status card click handlers
        statusCards.forEach(card => {
            card.addEventListener('click', function() {
                handleStatusCardClick(this);
            });

            // Handle keyboard navigation
            card.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    handleStatusCardClick(this);
                }
            });
        });

        function handleStatusCardClick(card) {
            const status = card.dataset.status;

            // Remove active state from all cards
            statusCards.forEach(c => c.classList.remove('active-status-card'));

            // Add active state to clicked card
            card.classList.add('active-status-card');

            // Expand filters section
            bsCollapse.show();

            // Set status filter
            document.getElementById('statusFilter').value = status;

            // Clear other filters
            document.getElementById('priorityFilter').value = '';
            document.getElementById('departmentFilter').value = '';
            document.getElementById('itemFilter').value = '';

            // Apply filters
            applyFilters();

            // Show clear filters button
            clearFiltersBtn.style.display = 'inline-block';

            // Update toggle button text
            filtersToggleBtn.innerHTML = '<i class="bi bi-funnel-fill"></i> Filters (Active)';
        }

        // Clear filters button
        clearFiltersBtn.addEventListener('click', function() {
            // Clear all filters
            filterInputs.forEach(input => {
                input.value = '';
            });

            // Remove active state from all status cards
            statusCards.forEach(card => card.classList.remove('active-status-card'));

            // Apply filters (which will show all)
            applyFilters();

            // Hide clear filters button
            this.style.display = 'none';

            // Update toggle button text
            filtersToggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters';
        });

        function applyFilters() {
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            const priorityFilter = document.getElementById('priorityFilter').value.toLowerCase();
            const departmentFilter = document.getElementById('departmentFilter').value.toLowerCase();
            const itemFilter = document.getElementById('itemFilter').value.toLowerCase();

            let visibleCount = 0;
            let hasActiveFilters = statusFilter || priorityFilter || departmentFilter || itemFilter;

            tableRows.forEach(row => {
                const status = row.dataset.status;
                const priority = row.dataset.priority;
                const department = row.dataset.department;
                const item = row.dataset.item;

                let isVisible = true;

                if (statusFilter && status !== statusFilter) isVisible = false;
                if (priorityFilter && priority !== priorityFilter) isVisible = false;
                if (departmentFilter && department !== departmentFilter) isVisible = false;
                if (itemFilter && !item.includes(itemFilter)) isVisible = false;

                if (isVisible) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            // Update badges
            if (hasActiveFilters) {
                filteredBadge.style.display = 'inline-block';
                totalCountSpan.textContent = visibleCount;
                clearFiltersBtn.style.display = 'inline-block';
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel-fill"></i> Filters (Active)';
            } else {
                filteredBadge.style.display = 'none';
                totalCountSpan.textContent = totalCount;
                clearFiltersBtn.style.display = 'none';
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters';
            }
        }

        // Apply filters when inputs change
        filterInputs.forEach(input => {
            input.addEventListener('input', applyFilters);
            input.addEventListener('change', applyFilters);
        });

        // Listen for filters collapse events to update button text
        filtersCollapse.addEventListener('shown.bs.collapse', function() {
            const hasActiveFilters = Array.from(filterInputs).some(input => input.value.trim() !== '');
            if (!hasActiveFilters) {
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters (Open)';
            }
        });

        filtersCollapse.addEventListener('hidden.bs.collapse', function() {
            const hasActiveFilters = Array.from(filterInputs).some(input => input.value.trim() !== '');
            if (hasActiveFilters) {
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel-fill"></i> Filters (Active)';
            } else {
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters';
            }
        });
    });
</script>

<style>
    .table tbody tr.table-warning {
        --bs-table-accent-bg: var(--bs-warning-bg-subtle);
    }

    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

    .clickable-card {
        cursor: pointer;
        transition: all 0.2s ease;
        border: 2px solid transparent;
    }

        .clickable-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
            border-color: #0d6efd;
        }

        .clickable-card:focus {
            outline: none;
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .active-status-card {
        border-color: #0d6efd !important;
        background-color: #f8f9fa;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(13, 110, 253, 0.3);
    }

    .badge {
        font-size: 0.75em;
    }

    .filter-input {
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .filter-input:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .status-card .card-title {
        font-weight: bold;
        font-size: 1.5rem;
    }

    .status-card .card-text {
        font-weight: 500;
        margin-bottom: 0;
    }

    .status-card:hover .card-title {
        transform: scale(1.05);
        transition: transform 0.2s ease;
    }
</style>