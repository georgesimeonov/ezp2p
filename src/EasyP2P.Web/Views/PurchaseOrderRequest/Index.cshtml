@model IEnumerable<EasyP2P.Web.Models.PurchaseOrderRequestViewModel>
@using EasyP2P.Web.Enums
@using System.Security.Claims
@using EasyP2P.Web.Models

@{
    ViewData["Title"] = "Purchase Order Requests";
    var currentUserRole = (UserRole)Enum.Parse(typeof(UserRole), User.FindFirstValue("UserRole") ?? "Requestor");
    var canViewAllDepartments = ViewBag.CanViewAllDepartments as bool? ?? false;
    var currentUser = User.Identity.Name;
    var filterModel = (FilterViewModel)ViewData["FilterModel"];
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>
            Purchase Order Requests Management
            @if (currentUserRole == UserRole.Requestor)
            {
                <small class="text-muted">(My Requests)</small>
            }
            else if (currentUserRole == UserRole.Approver && !canViewAllDepartments)
            {
                <small class="text-muted">(My Department)</small>
            }
        </h2>
        <div>
            @if (User.IsInRole(UserRole.Requestor.ToString()) || User.IsInRole(UserRole.Approver.ToString()) || User.IsInRole(UserRole.Purchaser.ToString()) || User.IsInRole(UserRole.Administrator.ToString()))
            {
                <a asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> New Purchase Request
                </a>
            }
        </div>
    </div>

    <div class="row mb-4">
        @{
            var statusGroups = Model.GroupBy(x => x.Status).ToDictionary(g => g.Key, g => g.Count());
            var priorityGroups = Model.GroupBy(x => x.Priority).ToDictionary(g => g.Key, g => g.Count());
        }

        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status-filter-value="PendingApproval" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-warning">@(statusGroups.GetValueOrDefault("PendingApproval", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-clock"></i> Pending Approval
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status-filter-value="Approved" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-success">@(statusGroups.GetValueOrDefault("Approved", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-check-circle"></i> Approved
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status-filter-value="PurchaseOrderCreated" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-info">@(statusGroups.GetValueOrDefault("PurchaseOrderCreated", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-file-text"></i> PO Created
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-priority-filter-value="Urgent" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-danger">@(priorityGroups.GetValueOrDefault("Urgent", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-exclamation-triangle"></i> Urgent
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status-filter-value="Rejected" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-danger">@(statusGroups.GetValueOrDefault("Rejected", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-x-circle"></i> Rejected
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status-filter-value="" role="button" tabindex="0">
                <div class="card-body border-primary">
                    <h5 class="card-title text-primary">@Model.Count()</h5>
                    <p class="card-text">
                        <i class="bi bi-list-ul"></i> Total Requests
                    </p>
                </div>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <partial name="_FilterPartial" model="filterModel" />

    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h5>
                <i class="bi bi-list-ul"></i>
                @if (currentUserRole == UserRole.Requestor)
                {
                    <text>My Purchase Order Requests</text>
                }
                else if (currentUserRole == UserRole.Approver && !canViewAllDepartments)
                {
                    <text>Department Purchase Order Requests</text>
                }
                else
                {
                    <text>All Purchase Order Requests</text>
                }
                <span class="badge bg-light text-dark total-grid-count">@Model.Count()</span>
                <span class="badge bg-warning text-dark filtered-grid-badge" style="display: none;">Filtered</span>
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover" id="mainGridTable">
                        <thead class="table-light">
                            <tr>
                                <th>
                                    Request ID
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="requestId" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Item
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="item" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Quantity
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="quantity" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Priority
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="priority" data-direction="desc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                @if (canViewAllDepartments || currentUserRole == UserRole.Administrator)
                                {
                                    <th>
                                        Department
                                        <button class="btn btn-sm btn-link p-0 sort-btn" data-column="department" data-direction="asc">
                                            <i class="bi bi-arrow-up-down"></i>
                                        </button>
                                    </th>
                                }
                                @if (currentUserRole != UserRole.Requestor)
                                {
                                    <th>
                                        Requested By
                                        <button class="btn btn-sm btn-link p-0 sort-btn" data-column="requestedBy" data-direction="asc">
                                            <i class="bi bi-arrow-up-down"></i>
                                        </button>
                                    </th>
                                }
                                <th>
                                    Status
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="status" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Request Date
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="date" data-direction="desc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>Expected Delivery</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model) @* Keep initial rendering, JS will handle filtering *@
                            {
                                <tr class="@(item.Priority == "Urgent" ? "table-warning" : "")"
                                    data-request-id="@item.Id"
                                    data-item="@item.ItemName.ToLower()"
                                    data-quantity="@item.Quantity"
                                    data-priority="@item.Priority.ToLower()"
                                    data-department="@(item.Department?.ToLower() ?? "")"
                                    data-requested-by="@(item.RequestedBy?.ToLower() ?? "")"
                                    data-status="@item.Status.ToLower()"
                                    data-date="@item.RequestDate.ToString("yyyy-MM-dd")"
                                    data-delivery-date="@(item.ExpectedDeliveryDate?.ToString("yyyy-MM-dd") ?? "")"
                                    data-budget-code="@(item.BudgetCode?.ToLower() ?? "")">
                                    <td>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="text-decoration-none fw-bold">
                                            #@item.Id
                                        </a>
                                    </td>
                                    <td>
                                        @item.ItemName
                                        @if (!string.IsNullOrEmpty(item.Comment))
                                        {
                                            <br>
                                            <small class="text-muted">@item.Comment</small>
                                        }
                                    </td>
                                    <td>@item.Quantity</td>
                                    <td>
                                        <span class="badge bg-@(item.Priority == "Urgent" ? "danger" :
                                                                item.Priority == "High" ? "warning" :
                                                                item.Priority == "Medium" ? "info" : "secondary")">
                                            @item.Priority
                                        </span>
                                    </td>
                                    @if (canViewAllDepartments || currentUserRole == UserRole.Administrator)
                                    {
                                        <td>@item.Department</td>
                                    }
                                    @if (currentUserRole != UserRole.Requestor)
                                    {
                                        <td>
                                            @item.RequestedBy
                                            @if (item.RequestedBy == currentUser)
                                            {
                                                <small class="badge bg-info">Me</small>
                                            }
                                        </td>
                                    }
                                    <td>
                                        <span class="badge @item.StatusBadgeClass">
                                            <i class="@item.StatusIcon"></i> @item.Status
                                        </span>
                                    </td>
                                    <td>@item.RequestDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        @if (item.ExpectedDeliveryDate.HasValue)
                                        {
                                            var deliveryClass = item.ExpectedDeliveryDate.Value < DateTime.Today && item.Status != "PurchaseOrderCreated" && item.Status != "Cancelled" && item.Status != "Rejected" ? "text-danger fw-bold" :
                                            item.ExpectedDeliveryDate.Value <= DateTime.Today.AddDays(3) && item.Status != "PurchaseOrderCreated" && item.Status != "Cancelled" && item.Status != "Rejected" ? "text-warning" : "";
                                            <span class="@deliveryClass">
                                                @item.ExpectedDeliveryDate.Value.ToString("yyyy-MM-dd")
                                                @if (item.ExpectedDeliveryDate.Value < DateTime.Today && item.Status != "PurchaseOrderCreated" && item.Status != "Cancelled" && item.Status != "Rejected")
                                                {
                                                    <i class="bi bi-exclamation-triangle" title="Overdue"></i>
                                                }
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not set</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@item.Id"
                                               class="btn btn-info btn-sm" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </a>

                                            @if (item.CanCreatePO && (User.IsInRole(UserRole.Purchaser.ToString()) || User.IsInRole(UserRole.Administrator.ToString())))
                                            {
                                                <a asp-controller="PurchaseOrder" asp-action="Create" asp-route-id="@item.Id"
                                                   class="btn btn-primary btn-sm" title="Create Purchase Order">
                                                    <i class="bi bi-file-plus"></i>
                                                </a>
                                            }

                                            @if (item.CanApprove && (ViewBag.CanApprove as bool? ?? false))
                                            {
                                                <form asp-action="Approve" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-success btn-sm"
                                                            onclick="return confirm('Approve request #@item.Id?')"
                                                            title="Approve">
                                                        <i class="bi bi-check"></i>
                                                    </button>
                                                </form>
                                            }
                                            @if (item.CanReject && (ViewBag.CanReject as bool? ?? false))
                                            {
                                                <form asp-action="Reject" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-danger btn-sm"
                                                            onclick="return confirm('Reject request #@item.Id?')"
                                                            title="Reject">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </form>
                                            }
                                            @if (item.CanCancel && (ViewBag.CanCancel as bool? ?? false))
                                            {
                                                <form asp-action="Cancel" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-outline-warning btn-sm"
                                                            onclick="return confirm('Cancel request #@item.Id?')"
                                                            title="Cancel">
                                                        <i class="bi bi-x-square"></i>
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    @if (currentUserRole == UserRole.Requestor)
                    {
                        <h4 class="text-muted mt-3">No Requests Found</h4>
                        <p class="text-muted">You haven't created any purchase order requests yet.</p>
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Create First Request
                        </a>
                    }
                    else if (currentUserRole == UserRole.Approver && !canViewAllDepartments)
                    {
                        <h4 class="text-muted mt-3">No Requests to Review</h4>
                        <p class="text-muted">There are no purchase order requests pending approval in your department.</p>
                    }
                    else
                    {
                        <h4 class="text-muted mt-3">No Requests Found</h4>
                        <p class="text-muted">No purchase order requests match your current filters or none exist.</p>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .sort-btn {
        color: #6c757d;
        text-decoration: none !important;
    }

        .sort-btn:hover {
            color: #0d6efd;
        }

        .sort-btn.active {
            color: #0d6efd;
        }

    .filter-input {
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .filter-input:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .table tbody tr.filtered-out {
        display: none;
    }

    .badge {
        font-size: 0.75em;
    }

    .card {
        transition: all 0.3s ease;
        border-radius: 0.75rem;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

    .clickable-card {
        cursor: pointer;
        transition: all 0.2s ease;
        border: 2px solid transparent;
    }

        .clickable-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
            border-color: #0d6efd;
        }

        .clickable-card:focus {
            outline: none;
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .active-status-card {
        border-color: #0d6efd !important;
        background-color: #f8f9fa;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(13, 110, 253, 0.3);
    }

    .status-card .card-title {
        font-weight: bold;
        font-size: 1.5rem;
    }

    .status-card .card-text {
        font-weight: 500;
        margin-bottom: 0;
    }

    .status-card:hover .card-title {
        transform: scale(1.05);
        transition: transform 0.2s ease;
    }

    .stat-card {
        transition: transform 0.2s ease-in-out;
    }

        .stat-card:hover {
            transform: translateY(-2px);
        }

    .stat-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .stat-value {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
    }

    /* Enhanced responsive design */
    @@media (max-width: 768px) {
        .status-card .card-title {
            font-size: 1.25rem;
        }

        .stat-value {
            font-size: 1.1rem;
        }

        .stat-icon {
            width: 35px;
            height: 35px;
        }
    }
</style>

@section Scripts {
    <script src="~/js/shared-grid-filters.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const config = {
                tableId: 'mainGridTable',
                filterContainerId: 'filtersCollapse', // The container of all filter inputs
                filterToggleBtnId: 'filtersToggleBtn',
                clearFiltersBtnId: 'clearFiltersBtn',
                applyFiltersBtnId: 'applyFiltersBtn',
                resetFiltersBtnId: 'resetFiltersBtn',
                statusCardClass: 'status-card', // Class for clickable status cards
                entityType: 'PurchaseOrderRequest' // To help JS know which data-attributes to target
            };
            initializeGridFilters(config);
        });
    </script>
}