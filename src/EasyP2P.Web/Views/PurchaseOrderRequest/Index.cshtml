@model IEnumerable<EasyP2P.Web.Models.PurchaseOrderRequestViewModel>
@using EasyP2P.Web.Enums
@using System.Security.Claims

@{
    ViewData["Title"] = "Purchase Order Requests";
    var currentUserRole = (UserRole)Enum.Parse(typeof(UserRole), User.FindFirstValue("UserRole") ?? "Requestor");
    var canViewAllDepartments = ViewBag.CanViewAllDepartments as bool? ?? false;
    var currentUser = User.Identity.Name;
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>
            Purchase Order Requests Management
            @if (currentUserRole == UserRole.Requestor)
            {
                <small class="text-muted">(My Requests)</small>
            }
            else if (currentUserRole == UserRole.Approver)
            {
                <small class="text-muted">(My Department)</small>
            }
        </h2>
        <div>
            @if (currentUserRole >= UserRole.Requestor)
            {
                <a asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> New Purchase Request
                </a>
            }

            @if (currentUserRole >= UserRole.Administrator)
            {
                <form asp-action="AddSample" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-outline-secondary">
                        <i class="bi bi-database-add"></i> Add Sample Data
                    </button>
                </form>
            }
        </div>
    </div>

    <!-- Status Summary Cards -->
    <div class="row mb-4">
        @{
            var statusGroups = Model.GroupBy(x => x.Status).ToDictionary(g => g.Key, g => g.Count());
            var priorityGroups = Model.GroupBy(x => x.Priority).ToDictionary(g => g.Key, g => g.Count());
        }

        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="PendingApproval" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-warning">@(statusGroups.GetValueOrDefault("PendingApproval", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-clock"></i> Pending Approval
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="Approved" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-success">@(statusGroups.GetValueOrDefault("Approved", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-check-circle"></i> Approved
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="PurchaseOrderCreated" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-info">@(statusGroups.GetValueOrDefault("PurchaseOrderCreated", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-file-text"></i> PO Created
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-priority="Urgent" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-danger">@(priorityGroups.GetValueOrDefault("Urgent", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-exclamation-triangle"></i> Urgent
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="Rejected" role="button" tabindex="0">
                <div class="card-body">
                    <h5 class="card-title text-danger">@(statusGroups.GetValueOrDefault("Rejected", 0))</h5>
                    <p class="card-text">
                        <i class="bi bi-x-circle"></i> Rejected
                    </p>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center status-card clickable-card" data-status="" role="button" tabindex="0">
                <div class="card-body border-primary">
                    <h5 class="card-title text-primary">@Model.Count()</h5>
                    <p class="card-text">
                        <i class="bi bi-list-ul"></i> Total Requests
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Additional Statistics Row -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card stat-card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon bg-light rounded me-3">
                            <i class="bi bi-calendar-month text-primary"></i>
                        </div>
                        <div>
                            <h6 class="stat-value mb-1">@Model.Count(r => r.RequestDate >= DateTime.Now.AddDays(-30))</h6>
                            <small class="text-muted">Requests This Month</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stat-card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon bg-light rounded me-3">
                            <i class="bi bi-speedometer text-success"></i>
                        </div>
                        <div>
                            @{
                                var approvalRate = Model.Any() ? Math.Round((double)Model.Count(r => r.Status == "Approved" || r.Status == "PurchaseOrderCreated") / Model.Count() * 100, 1) : 0;
                            }
                            <h6 class="stat-value mb-1">@approvalRate%</h6>
                            <small class="text-muted">Approval Rate</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stat-card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon bg-light rounded me-3">
                            <i class="bi bi-building text-info"></i>
                        </div>
                        <div>
                            <h6 class="stat-value mb-1">@Model.Where(r => !string.IsNullOrEmpty(r.Department)).Select(r => r.Department).Distinct().Count()</h6>
                            <small class="text-muted">Active Departments</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stat-card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon bg-light rounded me-3">
                            <i class="bi bi-stopwatch text-warning"></i>
                        </div>
                        <div>
                            @{
                                var avgDays = Model.Where(r => r.Status == "Approved" || r.Status == "PurchaseOrderCreated").Any()
                                ? Math.Round(Model.Where(r => r.Status == "Approved" || r.Status == "PurchaseOrderCreated")
                                .Average(r => (r.LastUpdated - r.RequestDate).TotalDays), 1) : 0;
                            }
                            <h6 class="stat-value mb-1">@avgDays days</h6>
                            <small class="text-muted">Avg. Processing Time</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Filters Section -->
    <div class="card mb-3">
        <div class="card-header">
            <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse"
                    data-bs-target="#filtersCollapse" aria-expanded="false" id="filtersToggleBtn">
                <i class="bi bi-funnel"></i> Filters & Search
            </button>
            <button class="btn btn-outline-danger btn-sm ms-2" id="clearFiltersBtn" style="display: none;">
                <i class="bi bi-x-circle"></i> Clear Filters
            </button>
        </div>
        <div class="collapse" id="filtersCollapse">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select id="statusFilter" class="form-select filter-input">
                            <option value="">All Statuses</option>
                            <option value="Created">Created</option>
                            <option value="PendingApproval">Pending Approval</option>
                            <option value="Approved">Approved</option>
                            <option value="Rejected">Rejected</option>
                            <option value="PurchaseOrderCreated">PO Created</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="priorityFilter" class="form-label">Priority</label>
                        <select id="priorityFilter" class="form-select filter-input">
                            <option value="">All Priorities</option>
                            <option value="Low">Low</option>
                            <option value="Medium">Medium</option>
                            <option value="High">High</option>
                            <option value="Urgent">Urgent</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="itemFilter" class="form-label">Item Search</label>
                        <input type="text" id="itemFilter" class="form-control filter-input" placeholder="Search items...">
                    </div>
                    @if (canViewAllDepartments)
                    {
                        <div class="col-md-3">
                            <label for="departmentFilter" class="form-label">Department</label>
                            <select id="departmentFilter" class="form-select filter-input">
                                <option value="">All Departments</option>
                                @foreach (var dept in Model.Select(x => x.Department).Distinct().Where(d => !string.IsNullOrEmpty(d)).OrderBy(x => x))
                                {
                                    <option value="@dept">@dept</option>
                                }
                            </select>
                        </div>
                    }
                </div>
                <div class="row g-3 mt-2">
                    <div class="col-md-2">
                        <label for="filterRequestId" class="form-label">Request ID</label>
                        <input type="number" class="form-control filter-input" id="filterRequestId" placeholder="Enter ID">
                    </div>
                    <div class="col-md-2">
                        <label for="filterQuantity" class="form-label">Quantity</label>
                        <div class="d-flex gap-1">
                            <input type="number" class="form-control filter-input" id="filterQuantityMin" placeholder="Min">
                            <input type="number" class="form-control filter-input" id="filterQuantityMax" placeholder="Max">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <label for="filterBudgetCode" class="form-label">Budget Code</label>
                        <input type="text" class="form-control filter-input" id="filterBudgetCode" placeholder="Budget code...">
                    </div>
                    @if (currentUserRole != UserRole.Requestor)
                    {
                        <div class="col-md-2">
                            <label for="filterRequestedBy" class="form-label">Requested By</label>
                            <input type="text" class="form-control filter-input" id="filterRequestedBy" placeholder="User name...">
                        </div>
                    }
                    <div class="col-md-2">
                        <label for="filterDateRange" class="form-label">Date Range</label>
                        <div class="d-flex gap-1">
                            <input type="date" class="form-control filter-input" id="filterDateFrom">
                            <input type="date" class="form-control filter-input" id="filterDateTo">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <label for="filterDeliveryDate" class="form-label">Expected Delivery</label>
                        <select class="form-select filter-input" id="filterDeliveryDate">
                            <option value="">All Dates</option>
                            <option value="overdue">Overdue</option>
                            <option value="thisweek">This Week</option>
                            <option value="nextweek">Next Week</option>
                            <option value="thismonth">This Month</option>
                        </select>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                <span id="filteredCount">@Model.Count()</span> of @Model.Count() requests shown
                            </small>
                            <div>
                                <button class="btn btn-sm btn-primary" id="applyFilters">
                                    <i class="bi bi-check"></i> Apply Filters
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" id="resetFilters">
                                    <i class="bi bi-arrow-clockwise"></i> Reset
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h5>
                <i class="bi bi-list-ul"></i>
                @if (currentUserRole == UserRole.Requestor)
                {
                    <text>My Purchase Order Requests</text>
                }
                else if (currentUserRole == UserRole.Approver)
                {
                    <text>Department Purchase Order Requests</text>
                }
                else
                {
                    <text>All Purchase Order Requests</text>
                }
                <span class="badge bg-light text-dark" id="totalCount">@Model.Count()</span>
                <span class="badge bg-warning text-dark" id="filteredBadge" style="display: none;">Filtered</span>
            </h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover" id="requestsTable">
                        <thead class="table-light">
                            <tr>
                                <th>
                                    Request ID
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="id" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Item
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="item" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Quantity
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="quantity" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Priority
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="priority" data-direction="desc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                @if (canViewAllDepartments)
                                {
                                    <th>
                                        Department
                                        <button class="btn btn-sm btn-link p-0 sort-btn" data-column="department" data-direction="asc">
                                            <i class="bi bi-arrow-up-down"></i>
                                        </button>
                                    </th>
                                }
                                @if (currentUserRole != UserRole.Requestor)
                                {
                                    <th>
                                        Requested By
                                        <button class="btn btn-sm btn-link p-0 sort-btn" data-column="requestedBy" data-direction="asc">
                                            <i class="bi bi-arrow-up-down"></i>
                                        </button>
                                    </th>
                                }
                                <th>
                                    Status
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="status" data-direction="asc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>
                                    Request Date
                                    <button class="btn btn-sm btn-link p-0 sort-btn" data-column="date" data-direction="desc">
                                        <i class="bi bi-arrow-up-down"></i>
                                    </button>
                                </th>
                                <th>Expected Delivery</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.OrderByDescending(x => x.RequestDate))
                            {
                                <tr class="@(item.Priority == "Urgent" ? "table-warning" : "")"
                                    data-request-id="@item.Id"
                                    data-item="@item.ItemName.ToLower()"
                                    data-quantity="@item.Quantity"
                                    data-priority="@item.Priority.ToLower()"
                                    data-department="@item.Department.ToLower()"
                                    data-requested-by="@item.RequestedBy.ToLower()"
                                    data-status="@item.Status.ToLower()"
                                    data-date="@item.RequestDate.ToString("yyyy-MM-dd")"
                                    data-delivery-date="@(item.ExpectedDeliveryDate?.ToString("yyyy-MM-dd") ?? "")"
                                    data-budget-code="@item.BudgetCode.ToLower()">
                                    <td>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="text-decoration-none fw-bold">
                                            #@item.Id
                                        </a>
                                    </td>
                                    <td>
                                        @item.ItemName
                                        @if (!string.IsNullOrEmpty(item.Comment))
                                        {
                                            <br>

                                            <small class="text-muted">@item.Comment</small>
                                        }
                                    </td>
                                    <td>@item.Quantity</td>
                                    <td>
                                        <span class="badge bg-@(item.Priority == "Urgent" ? "danger" :
                                                                item.Priority == "High" ? "warning" :
                                                                item.Priority == "Medium" ? "info" : "secondary")">
                                            @item.Priority
                                        </span>
                                    </td>
                                    @if (canViewAllDepartments)
                                    {
                                        <td>@item.Department</td>
                                    }
                                    @if (currentUserRole != UserRole.Requestor)
                                    {
                                        <td>
                                            @item.RequestedBy
                                            @if (item.RequestedBy == currentUser)
                                            {
                                                <small class="badge bg-info">Me</small>
                                            }
                                        </td>
                                    }
                                    <td>
                                        <span class="badge @item.StatusBadgeClass">
                                            <i class="@item.StatusIcon"></i> @item.Status
                                        </span>
                                    </td>
                                    <td>@item.RequestDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        @if (item.ExpectedDeliveryDate.HasValue)
                                        {
                                            var deliveryClass = item.ExpectedDeliveryDate.Value < DateTime.Today ? "text-danger" :
                                            item.ExpectedDeliveryDate.Value <= DateTime.Today.AddDays(3) ? "text-warning" : "";
                                            <span class="@deliveryClass">
                                                @item.ExpectedDeliveryDate.Value.ToString("yyyy-MM-dd")
                                                @if (item.ExpectedDeliveryDate.Value < DateTime.Today)
                                                {
                                                    <i class="bi bi-exclamation-triangle text-danger" title="Overdue"></i>
                                                }
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not set</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@item.Id"
                                               class="btn btn-info btn-sm">
                                                <i class="bi bi-eye"></i>
                                            </a>

                                            @if (item.CanCreatePO && currentUserRole >= UserRole.Purchaser)
                                            {
                                                <a asp-controller="PurchaseOrder" asp-action="Create" asp-route-id="@item.Id"
                                                   class="btn btn-primary btn-sm">
                                                    <i class="bi bi-file-plus"></i>
                                                </a>
                                            }

                                            @if (item.CanApprove && currentUserRole >= UserRole.Approver)
                                            {
                                                <form asp-action="Approve" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-success btn-sm"
                                                            onclick="return confirm('Approve request #@item.Id?')"
                                                            title="Approve">
                                                        <i class="bi bi-check"></i>
                                                    </button>
                                                </form>
                                                <form asp-action="Reject" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-danger btn-sm"
                                                            onclick="return confirm('Reject request #@item.Id?')"
                                                            title="Reject">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </form>
                                            }

                                            @if (item.CanCancel && (item.RequestedBy == currentUser || currentUserRole == UserRole.Administrator))
                                            {
                                                <form asp-action="Cancel" asp-route-id="@item.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-outline-warning btn-sm"
                                                            onclick="return confirm('Cancel request #@item.Id?')"
                                                            title="Cancel">
                                                        <i class="bi bi-x-square"></i>
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    @if (currentUserRole == UserRole.Requestor)
                    {
                        <h4 class="text-muted mt-3">No Requests Found</h4>
                        <p class="text-muted">You haven't created any purchase order requests yet.</p>
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Create First Request
                        </a>
                    }
                    else if (currentUserRole == UserRole.Approver)
                    {
                        <h4 class="text-muted mt-3">No Requests to Review</h4>
                        <p class="text-muted">There are no purchase order requests pending approval in your department.</p>
                    }
                    else
                    {
                        <h4 class="text-muted mt-3">No Requests Found</h4>
                        <p class="text-muted">No purchase order requests match your current filters.</p>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .sort-btn {
        color: #6c757d;
        text-decoration: none !important;
    }

        .sort-btn:hover {
            color: #0d6efd;
        }

        .sort-btn.active {
            color: #0d6efd;
        }

    .filter-input {
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .filter-input:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .table tbody tr.filtered-out {
        display: none;
    }

    .badge {
        font-size: 0.75em;
    }

    .card {
        transition: all 0.3s ease;
        border-radius: 0.75rem;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

    .clickable-card {
        cursor: pointer;
        transition: all 0.2s ease;
        border: 2px solid transparent;
    }

        .clickable-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
            border-color: #0d6efd;
        }

        .clickable-card:focus {
            outline: none;
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .active-status-card {
        border-color: #0d6efd !important;
        background-color: #f8f9fa;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(13, 110, 253, 0.3);
    }

    .status-card .card-title {
        font-weight: bold;
        font-size: 1.5rem;
    }

    .status-card .card-text {
        font-weight: 500;
        margin-bottom: 0;
    }

    .status-card:hover .card-title {
        transform: scale(1.05);
        transition: transform 0.2s ease;
    }

    .stat-card {
        transition: transform 0.2s ease-in-out;
    }

        .stat-card:hover {
            transform: translateY(-2px);
        }

    .stat-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .stat-value {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
    }

    /* Enhanced responsive design */
    @@media (max-width: 768px) {
        .status-card .card-title

    {
        font-size: 1.25rem;
    }

    .stat-value {
        font-size: 1.1rem;
    }

    .stat-icon {
        width: 35px;
        height: 35px;
    }

    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Elements
        const filterInputs = document.querySelectorAll('.filter-input');
        const tableRows = document.querySelectorAll('#requestsTable tbody tr');
        const totalCount = tableRows.length;
        const filteredBadge = document.getElementById('filteredBadge');
        const totalCountSpan = document.getElementById('totalCount');
        const filtersCollapse = document.getElementById('filtersCollapse');
        const filtersToggleBtn = document.getElementById('filtersToggleBtn');
        const clearFiltersBtn = document.getElementById('clearFiltersBtn');
        const applyFiltersBtn = document.getElementById('applyFilters');
        const resetFiltersBtn = document.getElementById('resetFilters');
        const sortButtons = document.querySelectorAll('.sort-btn');
        const statusCards = document.querySelectorAll('.status-card.clickable-card');

        let currentSort = { column: null, direction: 'asc' };

        // Bootstrap collapse instance
        const bsCollapse = new bootstrap.Collapse(filtersCollapse, { toggle: false });

        // Status card click handlers
        statusCards.forEach(card => {
            card.addEventListener('click', function() {
                handleStatusCardClick(this);
            });

            // Handle keyboard navigation
            card.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    handleStatusCardClick(this);
                }
            });
        });

        function handleStatusCardClick(card) {
            const status = card.dataset.status;
            const priority = card.dataset.priority;

            // Remove active state from all cards
            statusCards.forEach(c => c.classList.remove('active-status-card'));

            // Add active state to clicked card
            card.classList.add('active-status-card');

            // Expand filters section
            bsCollapse.show();

            // Clear other filters first
            filterInputs.forEach(input => input.value = '');

            // Set appropriate filter
            if (status) {
                document.getElementById('statusFilter').value = status;
            } else if (priority) {
                document.getElementById('priorityFilter').value = priority;
            }

            // Apply filters
            applyFilters();

            // Show clear filters button
            clearFiltersBtn.style.display = 'inline-block';
            filtersToggleBtn.innerHTML = '<i class="bi bi-funnel-fill"></i> Filters & Search (Active)';
        }

        // Clear filters
        clearFiltersBtn.addEventListener('click', function() {
            filterInputs.forEach(input => input.value = '');
            statusCards.forEach(card => card.classList.remove('active-status-card'));
            applyFilters();
            this.style.display = 'none';
            filtersToggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters & Search';
        });

        // Reset filters (same as clear)
        resetFiltersBtn.addEventListener('click', function() {
            clearFiltersBtn.click();
        });

        // Apply filters on button click
        applyFiltersBtn.addEventListener('click', applyFilters);

        // Apply filters on input change (with debounce)
        let filterTimeout;
        filterInputs.forEach(input => {
            input.addEventListener('input', function() {
                clearTimeout(filterTimeout);
                filterTimeout = setTimeout(applyFilters, 300);
            });
        });

        // Filter function
        function applyFilters() {
            let visibleCount = 0;
            const hasActiveFilters = Array.from(filterInputs).some(input => input.value.trim() !== '');

            // Get filter values
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            const priorityFilter = document.getElementById('priorityFilter').value.toLowerCase();
            const itemFilter = document.getElementById('itemFilter').value.toLowerCase();
            const departmentFilter = document.getElementById('departmentFilter')?.value.toLowerCase() || '';
            const requestIdFilter = document.getElementById('filterRequestId').value;
            const quantityMin = document.getElementById('filterQuantityMin').value;
            const quantityMax = document.getElementById('filterQuantityMax').value;
            const budgetCodeFilter = document.getElementById('filterBudgetCode').value.toLowerCase();
            const requestedByFilter = document.getElementById('filterRequestedBy')?.value.toLowerCase() || '';
            const dateFrom = document.getElementById('filterDateFrom').value;
            const dateTo = document.getElementById('filterDateTo').value;
            const deliveryDateFilter = document.getElementById('filterDeliveryDate').value;

            tableRows.forEach(row => {
                let isVisible = true;

                // Status filter
                if (statusFilter && row.dataset.status !== statusFilter) {
                    isVisible = false;
                }

                // Priority filter
                if (priorityFilter && row.dataset.priority !== priorityFilter) {
                    isVisible = false;
                }

                // Item filter
                if (itemFilter && !row.dataset.item.includes(itemFilter)) {
                    isVisible = false;
                }

                // Department filter
                if (departmentFilter && !row.dataset.department.includes(departmentFilter)) {
                    isVisible = false;
                }

                // Request ID filter
                if (requestIdFilter && row.dataset.requestId !== requestIdFilter) {
                    isVisible = false;
                }

                // Quantity range filter
                const quantity = parseInt(row.dataset.quantity);
                if (quantityMin && quantity < parseInt(quantityMin)) {
                    isVisible = false;
                }
                if (quantityMax && quantity > parseInt(quantityMax)) {
                    isVisible = false;
                }

                // Budget code filter
                if (budgetCodeFilter && !row.dataset.budgetCode.includes(budgetCodeFilter)) {
                    isVisible = false;
                }

                // Requested by filter
                if (requestedByFilter && !row.dataset.requestedBy.includes(requestedByFilter)) {
                    isVisible = false;
                }

                // Date range filter
                const rowDate = row.dataset.date;
                if (dateFrom && rowDate < dateFrom) {
                    isVisible = false;
                }
                if (dateTo && rowDate > dateTo) {
                    isVisible = false;
                }

                // Delivery date filter
                if (deliveryDateFilter && row.dataset.deliveryDate) {
                    const deliveryDate = new Date(row.dataset.deliveryDate);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);

                    switch (deliveryDateFilter) {
                        case 'overdue':
                            if (deliveryDate >= today) isVisible = false;
                            break;
                        case 'thisweek':
                            const endOfWeek = new Date(today);
                            endOfWeek.setDate(today.getDate() + (6 - today.getDay()));
                            if (deliveryDate < today || deliveryDate > endOfWeek) isVisible = false;
                            break;
                        case 'nextweek':
                            const startOfNextWeek = new Date(today);
                            startOfNextWeek.setDate(today.getDate() + (7 - today.getDay()));
                            const endOfNextWeek = new Date(startOfNextWeek);
                            endOfNextWeek.setDate(startOfNextWeek.getDate() + 6);
                            if (deliveryDate < startOfNextWeek || deliveryDate > endOfNextWeek) isVisible = false;
                            break;
                        case 'thismonth':
                            const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                            const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                            if (deliveryDate < startOfMonth || deliveryDate > endOfMonth) isVisible = false;
                            break;
                    }
                }

                // Apply visibility
                if (isVisible) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            // Update counts and badges
            document.getElementById('filteredCount').textContent = visibleCount;
            if (hasActiveFilters) {
                filteredBadge.style.display = 'inline-block';
                totalCountSpan.textContent = visibleCount;
                clearFiltersBtn.style.display = 'inline-block';
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel-fill"></i> Filters & Search (Active)';
            } else {
                filteredBadge.style.display = 'none';
                totalCountSpan.textContent = totalCount;
                clearFiltersBtn.style.display = 'none';
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters & Search';
            }
        }

        // Sorting functionality
        sortButtons.forEach(button => {
            button.addEventListener('click', function() {
                const column = this.dataset.column;
                let direction = this.dataset.direction;

                // Reset all sort buttons
                sortButtons.forEach(btn => {
                    btn.classList.remove('active');
                    btn.innerHTML = '<i class="bi bi-arrow-up-down"></i>';
                });

                // Toggle direction
                if (currentSort.column === column) {
                    direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    direction = 'asc';
                }

                // Update current sort
                currentSort = { column, direction };

                // Update button appearance
                this.classList.add('active');
                this.innerHTML = direction === 'asc' ? '<i class="bi bi-arrow-up"></i>' : '<i class="bi bi-arrow-down"></i>';
                this.dataset.direction = direction;

                // Sort the table
                sortTable(column, direction);
            });
        });

        function sortTable(column, direction) {
            const tbody = document.querySelector('#requestsTable tbody');
            const rows = Array.from(tableRows);

            rows.sort((a, b) => {
                let aValue, bValue;

                switch (column) {
                    case 'id':
                    case 'quantity':
                        aValue = parseInt(a.dataset[column === 'id' ? 'requestId' : 'quantity']);
                        bValue = parseInt(b.dataset[column === 'id' ? 'requestId' : 'quantity']);
                        break;
                    case 'date':
                        aValue = new Date(a.dataset.date);
                        bValue = new Date(b.dataset.date);
                        break;
                    case 'priority':
                        // Custom priority order
                        const priorityOrder = { 'urgent': 4, 'high': 3, 'medium': 2, 'low': 1 };
                        aValue = priorityOrder[a.dataset.priority] || 0;
                        bValue = priorityOrder[b.dataset.priority] || 0;
                        break;
                    case 'item':
                    case 'department':
                    case 'requestedBy':
                    case 'status':
                        aValue = a.dataset[column === 'requestedBy' ? 'requestedBy' : column];
                        bValue = b.dataset[column === 'requestedBy' ? 'requestedBy' : column];
                        break;
                    default:
                        return 0;
                }

                if (typeof aValue === 'string') {
                    return direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
                } else {
                    return direction === 'asc' ? aValue - bValue : bValue - aValue;
                }
            });

            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));
        }

        // Listen for filters collapse events to update button text
        filtersCollapse.addEventListener('shown.bs.collapse', function() {
            const hasActiveFilters = Array.from(filterInputs).some(input => input.value.trim() !== '');
            if (!hasActiveFilters) {
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters & Search (Open)';
            }
        });

        filtersCollapse.addEventListener('hidden.bs.collapse', function() {
            const hasActiveFilters = Array.from(filterInputs).some(input => input.value.trim() !== '');
            if (hasActiveFilters) {
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel-fill"></i> Filters & Search (Active)';
            } else {
                filtersToggleBtn.innerHTML = '<i class="bi bi-funnel"></i> Filters & Search';
            }
        });

        // Initialize with no filters applied
        applyFilters();
    });
</script>